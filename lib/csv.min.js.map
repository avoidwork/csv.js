{"version":3,"sources":["csv.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","global","coerce","value","result","tmp","undefined","isNaN","Number","REGEX_JSON","test","parse","decode","arg","delimiter","arguments","length","regex","RegExp","rows","trim","split","keys","shift","nth","x","i","n","row","replace","push","encode","header","Array","Object","join","map","prepare","cast","REGEX_NL","JSON","e","input","output","toString","REGEX_OBJTYPE","REGEX_QUOTE","REGEX_IE","navigator","ie","userAgent","version","parseInt","key","o","iterate","slice","call","idx","fn","Error","forEach","has","hasOwnProperty","v","k","module","exports","define","amd","csv","window"],"mappings":"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","file":"csv.min.js","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n * Simplify encoding & decoding CSV\r\n *\r\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\r\n * @copyright 2017\r\n * @license BSD-3-Clause\r\n * @version 1.0.4\r\n */\n(function (global) {\n\t\"use strict\";\n\n\tvar REGEX_IE = /msie|ie/i,\n\t    REGEX_NL = /\\n$/,\n\t    REGEX_OBJTYPE = /\\[object Object\\]/,\n\t    REGEX_JSON = /^[\\[\\{]/,\n\t    REGEX_QUOTE = /^\\s|\\\"|\\n|,|\\s$/,\n\t    navigator = global.navigator,\n\t    ie = navigator ? REGEX_IE.test(navigator.userAgent) : false,\n\t    version = ie ? parseInt(navigator.userAgent.replace(/(.*msie|;.*)/gi, \"\"), 10) : null;\n\n\t/**\r\n  * Returns an Object ( NodeList, etc. ) as an Array\r\n  *\r\n  * @method cast\r\n  * @param  {Object}  obj Object to cast\r\n  * @param  {Boolean} key [Optional] Returns key or value, only applies to Objects without a length property\r\n  * @return {Array}       Object as an Array\r\n  */\n\tvar cast = function () {\n\t\tif (!ie || version > 8) {\n\t\t\treturn function (obj) {\n\t\t\t\tvar key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\t\t\t\tvar o = [];\n\n\t\t\t\tif (!isNaN(obj.length)) {\n\t\t\t\t\to = Array.prototype.slice.call(obj);\n\t\t\t\t} else {\n\t\t\t\t\tkey ? o = keys(obj) : iterate(obj, function (i) {\n\t\t\t\t\t\treturn o.push(i);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn o;\n\t\t\t};\n\t\t} else {\n\t\t\treturn function (obj) {\n\t\t\t\tvar key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\t\t\t\tvar o = [];\n\n\t\t\t\tif (!isNaN(obj.length)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\to = Array.prototype.slice.call(obj);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\titerate(obj, function (i, idx) {\n\t\t\t\t\t\t\tif (idx !== \"length\") {\n\t\t\t\t\t\t\t\to.push(i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tkey ? o = keys(obj) : iterate(obj, function (i) {\n\t\t\t\t\t\treturn o.push(i);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn o;\n\t\t\t};\n\t\t}\n\t}();\n\n\t/**\r\n  * Coerces a String to a Type\r\n  *\r\n  * @method coerce\r\n  * @memberOf utility\r\n  * @param  {String} value String to coerce\r\n  * @return {Mixed}        Primitive version of the String\r\n  */\n\tfunction coerce(value) {\n\t\tvar result = void 0,\n\t\t    tmp = void 0;\n\n\t\tif (value === null || value === undefined) {\n\t\t\tresult = undefined;\n\t\t} else if (value === \"true\") {\n\t\t\tresult = true;\n\t\t} else if (value === \"false\") {\n\t\t\tresult = false;\n\t\t} else if (value === \"null\") {\n\t\t\tresult = null;\n\t\t} else if (value === \"undefined\") {\n\t\t\tresult = undefined;\n\t\t} else if (value === \"\") {\n\t\t\tresult = value;\n\t\t} else if (!isNaN(tmp = Number(value))) {\n\t\t\tresult = tmp;\n\t\t} else if (REGEX_JSON.test(value)) {\n\t\t\tresult = parse(value) || value;\n\t\t} else {\n\t\t\tresult = value;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\r\n  * Converts CSV to an Array of Objects\r\n  *\r\n  * @method decode\r\n  * @param  {String} arg       CSV string\r\n  * @param  {String} delimiter [Optional] Delimiter to split columns on, default is \",\"\r\n  * @return {Array}            Array of Objects\r\n  */\n\tfunction decode(arg) {\n\t\tvar delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \",\";\n\n\t\tvar regex = new RegExp(delimiter + \"(?=(?:[^\\\"]|\\\"(?:[^\\\"])[^\\\"]*\\\")*$)\"),\n\t\t    rows = trim(arg).split(\"\\n\"),\n\t\t    keys = rows.shift().split(delimiter),\n\t\t    result = [],\n\t\t    nth = rows.length,\n\t\t    x = keys.length;\n\n\t\tvar i = -1,\n\t\t    n = void 0,\n\t\t    obj = void 0,\n\t\t    row = void 0;\n\n\t\twhile (++i < nth) {\n\t\t\tobj = {};\n\t\t\trow = rows[i].split(regex);\n\n\t\t\tn = -1;\n\t\t\twhile (++n < x) {\n\t\t\t\tobj[keys[n]] = coerce((row[n] || \"\").replace(/^\"|\"$/g, \"\"));\n\t\t\t}\n\n\t\t\tresult.push(obj);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\r\n  * Encodes `arg` as CSV\r\n  *\r\n  * @method encode\r\n  * @param  {String}  arg       Array, Object or JSON String to transform\r\n  * @param  {String}  delimiter [Optional] Character to separate fields\r\n  * @param  {Boolean} header    [Optional] False to not include field names as first row\r\n  * @return {String}            CSV string\r\n  */\n\tfunction encode(arg) {\n\t\tvar delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \",\";\n\t\tvar header = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n\t\tvar obj = parse(arg) || arg;\n\t\tvar result = \"\";\n\n\t\tif (obj instanceof Array) {\n\t\t\tif (obj[0] instanceof Object) {\n\t\t\t\tif (header) {\n\t\t\t\t\tresult = keys(obj[0]).join(delimiter) + \"\\n\";\n\t\t\t\t}\n\n\t\t\t\tresult += obj.map(function (i) {\n\t\t\t\t\treturn encode(i, delimiter, false);\n\t\t\t\t}).join(\"\\n\");\n\t\t\t} else {\n\t\t\t\tresult += prepare(obj, delimiter) + \"\\n\";\n\t\t\t}\n\t\t} else {\n\t\t\tif (header) {\n\t\t\t\tresult = keys(obj).join(delimiter) + \"\\n\";\n\t\t\t}\n\n\t\t\tresult += cast(obj).map(function (i) {\n\t\t\t\treturn prepare(i, delimiter);\n\t\t\t}).join(delimiter) + \"\\n\";\n\t\t}\n\n\t\treturn result.replace(REGEX_NL, \"\");\n\t}\n\n\t/**\r\n  * Iterates an Object and executes a function against the properties,\r\n  * & can be halted by returning `false` from `fn`\r\n  *\r\n  * @method iterate\r\n  * @param  {Object}   obj Object to iterate\r\n  * @param  {Function} fn  Function to execute against properties\r\n  * @return {Object}       Object\r\n  */\n\tvar iterate = function () {\n\t\tif (typeof Object.keys == \"function\") {\n\t\t\treturn function (obj, fn) {\n\t\t\t\tif (typeof fn != \"function\") {\n\t\t\t\t\tthrow new Error(\"Invalid arguments\");\n\t\t\t\t}\n\n\t\t\t\tObject.keys(obj).forEach(function (i) {\n\t\t\t\t\treturn fn.call(obj, obj[i], i);\n\t\t\t\t});\n\n\t\t\t\treturn obj;\n\t\t\t};\n\t\t} else {\n\t\t\treturn function (obj, fn) {\n\t\t\t\tvar has = Object.prototype.hasOwnProperty,\n\t\t\t\t    i,\n\t\t\t\t    result;\n\n\t\t\t\tif (typeof fn != \"function\") {\n\t\t\t\t\tthrow new Error(\"Invalid arguments\");\n\t\t\t\t}\n\n\t\t\t\tfor (i in obj) {\n\t\t\t\t\tif (has.call(obj, i)) {\n\t\t\t\t\t\tresult = fn.call(obj, obj[i], i);\n\n\t\t\t\t\t\tif (result === false) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn obj;\n\t\t\t};\n\t\t}\n\t}();\n\n\t/**\r\n  * Returns the keys in an \"Associative Array\"\r\n  *\r\n  * @method keys\r\n  * @param  {Mixed} obj Array or Object to extract keys from\r\n  * @return {Array}     Array of the keys\r\n  */\n\tvar keys = function () {\n\t\tif (typeof Object.keys == \"function\") {\n\t\t\treturn function (obj) {\n\t\t\t\treturn Object.keys(obj);\n\t\t\t};\n\t\t} else {\n\t\t\treturn function (obj) {\n\t\t\t\tvar keys = [];\n\n\t\t\t\titerate(obj, function (v, k) {\n\t\t\t\t\treturn keys.push(k);\n\t\t\t\t});\n\n\t\t\t\treturn keys;\n\t\t\t};\n\t\t}\n\t}();\n\n\t/**\r\n  * Parses the argument\r\n  *\r\n  * @method parse\r\n  * @param  {String} arg String to parse\r\n  * @return {Mixed}      Resulting from parsing JSON, or undefined\r\n  */\n\tfunction parse(arg) {\n\t\ttry {\n\t\t\treturn JSON.parse(arg);\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\r\n  * Prepares input based on CSV rules\r\n  *\r\n  * @method param\r\n  * @param  {Mixed}  input     Array, Object or String\r\n  * @param  {String} delimiter [Optional] Character to separate fields\r\n  * @return {String}           CSV formatted String\r\n  */\n\tfunction prepare(input, delimiter) {\n\t\tvar output = void 0;\n\n\t\tif (input instanceof Array) {\n\t\t\toutput = \"\\\"\" + input.toString() + \"\\\"\";\n\n\t\t\tif (REGEX_OBJTYPE.test(output)) {\n\t\t\t\toutput = \"\\\"\" + encode(input, delimiter) + \"\\\"\";\n\t\t\t}\n\t\t} else if (input instanceof Object) {\n\t\t\toutput = \"\\\"\" + encode(input, delimiter) + \"\\\"\";\n\t\t} else if (REGEX_QUOTE.test(input)) {\n\t\t\toutput = \"\\\"\" + input.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\";\n\t\t} else {\n\t\t\toutput = input;\n\t\t}\n\n\t\treturn output;\n\t}\n\n\tfunction trim(arg) {\n\t\treturn arg.replace(/^(\\s+|\\t+)|(\\s+|\\t+|\\n+)$/g, \"\");\n\t}\n\n\tvar output = {\n\t\tdecode: decode,\n\t\tencode: encode,\n\t\tversion: \"1.0.4\"\n\t};\n\n\t// CommonJS, AMD, script tag\n\tif (typeof module !== \"undefined\") {\n\t\tmodule.exports = output;\n\t} else if (typeof define === \"function\" && _typeof(define.amd) !== void 0) {\n\t\tdefine(function () {\n\t\t\treturn output;\n\t\t});\n\t} else {\n\t\tglobal.csv = output;\n\t}\n})(typeof window !== \"undefined\" ? window : global);\n"]}