{"version":3,"sources":["csv.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","global","coerce","value","result","tmp","undefined","isNaN","Number","REGEX_JSON","test","parse","decode","arg","delimiter","arguments","length","regex","RegExp","rows","trim","split","keys","shift","nth","x","i","row","n","push","encode","header","keyRef","ref","Array","Object","join","map","prepare","cast","replace","REGEX_NL","JSON","e","input","output","toString","REGEX_OBJTYPE","REGEX_IE","navigator","ie","userAgent","parseInt","key","isArray","from","iterate","fn","Error","forEach","call","iface","version","exports","module","define","amd","csv","window"],"mappings":"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","file":"csv.min.js","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Simplify encoding & decoding CSV\n *\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\n * @copyright 2017\n * @license BSD-3-Clause\n * @version 1.0.3\n */\n(function (global) {\n\t\"use strict\";\n\n\tvar REGEX_IE = /msie|ie/i,\n\t    REGEX_NL = /(\\n|\\r)$/,\n\t    REGEX_OBJTYPE = /\\[object Object\\]/,\n\t    REGEX_JSON = /^[\\[\\{]/,\n\t    REGEX_QUOTE = /^\\s|\\\"|\\n|,|\\s$/,\n\t    REGEX_WRAPPED = /^\".*\"$/,\n\t    navigator = global.navigator,\n\t    ie = navigator ? REGEX_IE.test(navigator.userAgent) : false,\n\t    version = ie ? parseInt(navigator.userAgent.replace(/(.*msie|;.*)/gi, \"\"), 10) : null;\n\n\tvar cast = function cast(obj) {\n\t\tvar key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\t\tvar ref = arguments[2];\n\n\t\tvar result = void 0;\n\n\t\tif (Array.isArray(obj)) {\n\t\t\tresult = Array.from(obj);\n\t\t} else if (key) {\n\t\t\tresult = keys(obj, ref);\n\t\t} else {\n\t\t\tresult = [];\n\t\t\titerate(obj, function (i) {\n\t\t\t\treturn result.push(i);\n\t\t\t}, ref);\n\t\t}\n\n\t\treturn result;\n\t};\n\n\tfunction coerce(value) {\n\t\tvar result = void 0,\n\t\t    tmp = void 0;\n\n\t\tif (value === null || value === undefined) {\n\t\t\tresult = undefined;\n\t\t} else if (value === \"true\") {\n\t\t\tresult = true;\n\t\t} else if (value === \"false\") {\n\t\t\tresult = false;\n\t\t} else if (value === \"null\") {\n\t\t\tresult = null;\n\t\t} else if (value === \"undefined\") {\n\t\t\tresult = undefined;\n\t\t} else if (value === \"\") {\n\t\t\tresult = value;\n\t\t} else if (!isNaN(tmp = Number(value))) {\n\t\t\tresult = tmp;\n\t\t} else if (REGEX_JSON.test(value)) {\n\t\t\tresult = parse(value);\n\t\t} else {\n\t\t\tresult = value;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfunction decode(arg) {\n\t\tvar delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \",\";\n\n\t\tvar regex = new RegExp(delimiter + \"(?=(?:[^\\\"]|\\\"(?:[^\\\"])[^\\\"]*\\\")*$)\"),\n\t\t    rows = trim(arg).split(\"\\n\"),\n\t\t    keys = rows.shift().split(delimiter),\n\t\t    result = [],\n\t\t    nth = rows.length,\n\t\t    x = keys.length;\n\n\t\tvar i = -1;\n\n\t\twhile (++i < nth) {\n\t\t\tvar obj = {},\n\t\t\t    row = rows[i].split(regex),\n\t\t\t    n = -1;\n\n\t\t\twhile (++n < x) {\n\t\t\t\tobj[keys[n]] = coerce(row[n] || \"\");\n\t\t\t}\n\n\t\t\tresult.push(obj);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfunction encode(arg) {\n\t\tvar delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \",\";\n\t\tvar header = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\t\tvar keyRef = arguments[3];\n\n\t\tvar obj = parse(arg);\n\t\tvar result = \"\",\n\t\t    ref = void 0;\n\n\t\tif (obj instanceof Array) {\n\t\t\tif (obj[0] instanceof Object) {\n\t\t\t\tif (header) {\n\t\t\t\t\tref = keys(obj[0]);\n\t\t\t\t\tresult = ref.join(delimiter) + \"\\n\";\n\t\t\t\t}\n\n\t\t\t\tresult += obj.map(function (i) {\n\t\t\t\t\treturn encode(i, delimiter, false, ref);\n\t\t\t\t}).join(\"\\n\");\n\t\t\t} else {\n\t\t\t\tresult += prepare(obj, delimiter) + \"\\n\";\n\t\t\t}\n\t\t} else {\n\t\t\tif (header) {\n\t\t\t\tref = keys(obj, keyRef);\n\t\t\t\tresult = ref.join(delimiter) + \"\\n\";\n\t\t\t} else {\n\t\t\t\tref = keyRef;\n\t\t\t}\n\n\t\t\tresult += cast(obj, false, ref).map(function (i) {\n\t\t\t\treturn prepare(i, delimiter);\n\t\t\t}).join(delimiter) + \"\\n\";\n\t\t}\n\n\t\treturn result.replace(REGEX_NL, \"\");\n\t}\n\n\tvar iterate = function iterate(obj, fn, keyRef) {\n\t\tif (typeof fn != \"function\") {\n\t\t\tthrow new Error(\"Invalid arguments\");\n\t\t}\n\n\t\t(keyRef || Object.keys(obj)).forEach(function (i) {\n\t\t\treturn fn.call(obj, obj[i], i);\n\t\t});\n\n\t\treturn obj;\n\t};\n\n\tvar keys = function keys(obj, ref) {\n\t\treturn ref !== void 0 ? ref.map(function (i) {\n\t\t\treturn obj[i];\n\t\t}) : Object.keys(obj);\n\t};\n\n\tfunction parse(arg) {\n\t\ttry {\n\t\t\treturn JSON.parse(arg);\n\t\t} catch (e) {\n\t\t\treturn arg;\n\t\t}\n\t}\n\n\tfunction prepare(input, delimiter) {\n\t\tvar output = void 0;\n\n\t\tif (input instanceof Array) {\n\t\t\toutput = \"\\\"\" + input.toString() + \"\\\"\";\n\n\t\t\tif (REGEX_OBJTYPE.test(output)) {\n\t\t\t\toutput = \"\\\"\" + encode(input, delimiter) + \"\\\"\";\n\t\t\t}\n\t\t} else if (input instanceof Object) {\n\t\t\toutput = \"\\\"\" + encode(input, delimiter) + \"\\\"\";\n\t\t} else {\n\t\t\toutput = input;\n\t\t}\n\n\t\treturn output;\n\t}\n\n\tvar trim = function trim(arg) {\n\t\treturn arg.replace(/^(\\s+|\\t+)|(\\s+|\\t+|\\n+)$/g, \"\");\n\t};\n\n\tvar iface = {\n\t\tdecode: decode,\n\t\tencode: encode,\n\t\tversion: \"1.0.3\"\n\t};\n\n\t// CommonJS, AMD, script tag\n\tif (typeof exports != \"undefined\") {\n\t\tmodule.exports = iface;\n\t} else if (typeof define == \"function\" && _typeof(define.amd) !== void 0) {\n\t\tdefine(function () {\n\t\t\treturn iface;\n\t\t});\n\t} else {\n\t\tglobal.csv = iface;\n\t}\n})(typeof window !== \"undefined\" ? window : global);\n"]}